Request -   WS Input
Response -  WS Output

Message Exhange Format - JOSN? XML? for request and response

---------------------------------------------------------------------------------

app consume a service from WS

Service provider is the one that hold WS



Transport is defined how WS is transport exposed internet or queue 

HTTP MQ ?



SOAP and REST are not really comparable

Simple Orientes Access Protocol

we use xml as exchange format

-----------------------------------------------------------------------------------------

REST

representacional State transfer

YOU HAVE to think in resourses of you application

use http verbose

----------------------------------------------------------------------------------------

Spring Example

binary Search

// bubble sort algorithm ??
// Quick sort


Ver que es

- Tight Coupling using Binary Search Algorithm

Coupling in Java
In object oriented design, Coupling refers to the degree of direct knowledge that one element has of another. In other words, how often do changes in class A force related changes in class B.
There are two types of coupling:

Tight coupling : In general, Tight coupling means the two classes often change together. In other words, if A knows more than it should about the way in which B was implemented, then A and B are tightly coupled.
Example : If you want to change the skin, you would also have to change the design of your body as well because the two are joined together â€“ they are tightly coupled. The best example of tight coupling is RMI(Remote Method Invocation).


// Java program to illustrate 
// tight coupling concept 
class Volume 
{ 
	public static void main(String args[]) 
	{ 
		Box b = new Box(5,5,5); 
		System.out.println(b.volume); 
	} 
} 
class Box 
{ 
	public int volume; 
	Box(int length, int width, int height) 
	{ 
		this.volume = length * width * height; 
	} 
} 


https://www.geeksforgeeks.org/coupling-in-java/

--------------------------------------------------
SPRING

LOOSELY COUPLED
DEPENDENCY INJECTION 

most important consepts of spring
--------------------------------------------------

public class SpringIn5StepsApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringIn5StepsApplication.class, args);
		
		// we made lossely coupled by used quick sort and bubble sort independent 
		BinarySearchImpl binarySearch = new BinarySearchImpl(new QuickSortAlgorithm2()); // EVERY TIME A (new ew QuickSortAlgorithm2()) is called is a BEAN
		
		
		int result = binarySearch.binarySearch(new int[]{124,4,6}, 3);
		
		System.out.println(result);
		
	}

}

this 3 	questions are made by pass Spring and help us to wired beans together

// what are the beans? that spring has to manage

@Component annotation is used to tell spring what are the beans.
public class BinarySearchImpl {      // esta es la clase COMO COMPONENTE y se esta cableando digamos a su variable de instancia 

@Component
public class BubbleSortAlgorithm implements SortAlgorithm {   // ESTA TAMBIEN LA AGARRO DE COMPONENTE 


// what are the dependencies of a bean?    sortAlgorithm

@Autowired    // INJECTION 

	private SortAlgorithm sortAlgorithm;  // ESTA ES UNA VARIABLE DE INSTANCIA DE LA CLASE BinarySearchImpl  CREO QUE EL AUTOWIRED SE HACE CON EL CONSTRUCTOR DE LA CLASE ( y ahora le dice CONTRUCTOR INJECTION ) 
	
3 formas

// EL ERLIER SPRING USABA LA INJECTION EN CONTRUCTOR VAMOS LA VARIABLE DE INSTANCIA  ya va tomando forma esto

Constructor   // si tienes mandatory injection usa constructor si es opcional sua setter

Setter

No Setter or Constructor	
	

// where to rearch for beans? // NO SE NECESITO POR QUE TODAS LAS CLASES ESTAN EN EL MISMO PAQUETE SI NO HAY QUE PONERLE LAS ANOTACIONES


@SpringBootApplication
public class SpringIn5StepsApplication {


package leonz2code.org.udemy.spring.basics.springin5steps;

----------------------------------------------------------------------------

APPLICATION CONTEXT

is the one that will mantain and handle all the beans


----------------------------------------------------------------------------
DEPENDENCY INJECTION
----------------------------------------------------------------------------

What is Dependency Injection:
Dependency Injection is the main functionality provided by Spring IOC(Inversion of Control). The Spring-Core module is responsible for injecting dependencies through either Constructor or Setter methods. 

https://www.geeksforgeeks.org/spring-dependency-injection-with-example/

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




















































